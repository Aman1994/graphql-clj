Document ::= Definition+
Definition ::= OperationDefinition FragmentDefinition*
OperationDefinition ::= OperationType? <Ignored> Name? <Ignored> VariableDefinitions? <Ignored> Directives? SelectionSet
OperationType ::= "query" | "mutation"
VariableDefinitions ::= "(" VariableDefinition+ ")"
SourceCharacter ::= #"[\x{9}\x{A}\x{D}\x{20}-\uFFFF]"
Ignored ::= Ignore*
Ignore ::= UnicodeBOM | WhiteSpace | LineTerminator | Comment | Comma
UnicodeBOM ::= "\uFEFF"
WhiteSpace ::= #"[\x{9}\x{20}]"
LineTerminator ::= #"\x{A}" | #"\x{D}\x{A}" | #"\x{D}"
CommentChar ::= #"[\x{9}\x{20}-\uFFFF]"
Comment ::= "#" CommentChar+
Comma ::= ","
Punctuator ::= #"[!$().:=@\[\]\{\}]"
Name ::= #"[_A-Za-z][_0-9A-Za-z]*"
NegativeSign ::= "-"
NonZeroDigit ::= #"[1-9]"
Digit ::= #"[0-9]"
IntegerPart ::= NegativeSign? '0' | NegativeSign? NonZeroDigit Digit*
IntValue ::= IntegerPart
FractionalPart ::= "." Digit+
ExponentIndicator ::= "e" | "E"
Sign ::= "+" | "-"
ExponentPart ::= ExponentIndicator Sign? Digit+
FloatValue ::= IntegerPart FractionalPart
EscapedUnicode ::= #"[0-9A-Fa-f]{4}"
EscapedCharacter ::= "\\" #"[\"\/bfnrt]"
StringCharacter ::= #"[\x{9}\x{20}-\x{49}\x{51}-\uFFFF]" | "\\" "u" EscapedUnicode | "\\" EscapedCharacter
StringValue ::=  "\"""\"" | "\"" StringCharacter+ "\""
Token ::= Punctuator | Name | IntValue | FloatValue | StringValue
EnumValue ::= Name
Value ::= Variable | IntValue | FloatValue | StringValue | BooleanValue | EnumValue | ListValue | ObjectValue
Variable ::= "$" Name
VariableDefinition ::= "(" VariableDefinition ")" | Variable ":" <Ignored> Type DefaultValue?
Type ::= NamedType | ListType | NonNullType
NamedType ::= Name
ListType ::= "[" Type "]"
NonNullType ::= NamedType | ListType
DefaultValue ::= Value
BooleanValue ::= "true" | "false"
ObjectValue ::= "{" "}" | "{" ObjectField "}"
ObjectField ::= Name ":" Value
ListValue ::= "[" "]" | "[" Value "]"
Directives ::= Directive+
Directive ::= "@" Name Arguments? <Ignored>
Arguments ::= "(" Argument+ ")"
Argument ::= Name ":" <Ignored> Value <Ignored>*
Alias ::= Name ":"
FragmentDefinition ::= "fragment" <Ignored> FragmentName <Ignored> TypeCondition Directives? SelectionSet
FragmentName ::= Name
TypeCondition ::= "on" <Ignored> NamedType <Ignored>
SelectionSet ::= "{" <Ignored> Selection+ "}" <Ignored>
Selection ::= Field <Ignored> | FragmentSpread <Ignored> | InlineFragment <Ignored>
Field ::= Alias? <Ignored> Name Arguments? <Ignored> Directives? SelectionSet?
FragmentSpread ::= "..." FragmentName <Ignored> Directives?
InlineFragment ::= "..." <Ignored> TypeCondition? Directives? SelectionSet
